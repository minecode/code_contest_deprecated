{"version":3,"sources":["store/index.tsx","services/apiDatabase.ts","components/Authentication/styles.ts","components/Authentication/index.tsx","components/Navbar/styles.ts","components/Navbar/index.tsx","components/UserList/styles.ts","components/UserList/index.tsx","components/LoginMessage/styles.ts","components/LoginMessage/index.tsx","components/Utils/index.tsx","components/ChallengeInfo/styles.ts","components/ChallengeInfo/index.tsx","services/apiCodeContest.ts","components/ChallengeCode/styles.ts","components/ChallengeCode/index.tsx","components/Challenge/styles.ts","components/Challenge/index.tsx","components/ContestButton/styles.ts","components/ContestButton/index.tsx","components/ChallengeButton/styles.ts","components/ChallengeButton/index.tsx","components/ContestList/styles.ts","components/ContestList/index.tsx","components/Layout/styles.ts","hooks/useFetch.ts","components/Layout/index.tsx","styles/GlobalStyles.ts","App.tsx","index.tsx"],"names":["INITIAL_STATE","data","auth","authenticated","user","id","name","surname","image","token","selectedChallenge","globalScore","listOfUsers","challengeScore","userScore","challengeIndex","challengeList","store","createStore","state","action","type","apiDatabase","axios","create","baseURL","Auth","styled","div","BtnGoogle","button","Authentication","dispatch","useDispatch","useSelector","login","response","a","newData","googleId","profileObj","givenName","familyName","imageUrl","tokenId","post","base64","encode","clientId","onLogoutSuccess","render","renderProps","onClick","disabled","onSuccess","onFailure","cookiePolicy","isSignedIn","Container","UserInfo","Avatar","img","Navbar","dataAuth","src","Role","span","User","UserRow","score","decode","firstName","lastName","UserList","challengeName","split","join","length","map","element","i","filter","element2","userId","pop","key","LoginInfo","LoginMessage","Challenge","Row","Col","xs","className","buttonText","titleCase","str","splitStr","toLowerCase","charAt","toUpperCase","substring","config","headers","Authorization","process","Accept","ContainerDescription","Info","ContainerInfo","Title","h1","Separator","ChallengeInfo","selectedChallengeName","content","source","apiCodeContest","SubmitButton","ChallengeCodeFiles","Editor","AceEditor","ChallengeCodeFilesZone","ChallengeCode","useState","show","setShow","fileName","setFileName","inProgress","setInProgress","bodyRequest","setBodyRequest","currentChallengeName","setCurrentChallengeName","handleShow","submitFile","put","submitCode","onChange","newValue","message","committer","email","get","fileAlreadyExist","sha","console","log","uploadRepoCode","getCodeSended","useEffect","debounceChangePeriod","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","onDrop","acceptedFile","file","reader","FileReader","readAsDataURL","addEventListener","result","getRootProps","getInputProps","isDragActive","isDragReject","Modal","onHide","backChallengeCode","Header","closeButton","Body","Spinner","animation","Grid","Contest","ContestIcon","EmojiFoodBeverage","ContestButton","contestName","size","contestId","HashtagIcon","Hashtag","CheckIcon","Check","ChallengeButton","challenge","challengeId","ContainerList","Category","ContestList","dataTree","tree","contestsActive","setContestsActive","handleSelectChange","useCallback","contest","path","includes","toString","handleVisibleContest","elem","useFetch","url","useSWR","revalidateOnFocus","error","mutate","Layout","load","setLoad","createGlobalStyle","App","GlobalStyles","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.987ae690.chunk.js","sourcesContent":["import { createStore } from 'redux'\n\nconst INITIAL_STATE = {\n    data: {\n        auth: {\n            authenticated: false,\n            user: {\n                id: null,\n                name: null,\n                surname: null,\n                image: null\n            },\n            token: null\n        },\n        selectedChallenge: {\n            name: null\n        },\n        globalScore: null,\n        listOfUsers: null,\n        challengeScore: null,\n        userScore: null,\n        challengeIndex: null,\n        challengeList: null\n    }\n}\n\nfunction globalStore (state: any, action: any) {\n    switch (action.type) {\n    case 'LOGIN':\n        return action.data\n    case 'LOGOUT':\n        return action.data\n    case 'CHALLENGE':\n        return action.data\n    default:\n        return INITIAL_STATE\n    }\n}\n\nconst store = createStore(globalStore)\n\nexport default store\n","import axios from 'axios'\n\nconst apiDatabase = axios.create({\n    baseURL: 'https://code-contest-backend.herokuapp.com/contests'\n})\n\nexport default apiDatabase\n","import styled from 'styled-components'\n\nexport const Auth = styled.div`\n    grid-area: LG;\n    background-color: var(--tertiary);\n`\nexport const BtnGoogle = styled.button`\n    margin:5px;\n    width: 165px;\n    height:35px;\n    border-radius: 4px;\n    background: var(--link);\n    color:white;\n    border:0px transparent;\n    text-align: center;\n    &:hover {\n        background: var(--discord)\n    }\n    \n`\n","import React from 'react'\nimport base64 from 'base-64'\nimport apiDatabase from '../../services/apiDatabase'\nimport { Data } from '../Interface'\nimport { Auth, BtnGoogle } from './styles'\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nconst Authentication: React.FC = () => {\n    const dispatch = useDispatch()\n    const data = useSelector((state: Data) => state.data)\n    const authenticated = useSelector((state: Data) => state.data.auth.authenticated)\n\n    const login = async (response: any) => {\n        const newData = { data: data }\n        newData.data.auth = {\n            authenticated: true,\n            user: {\n                id: response.googleId,\n                name: response.profileObj.givenName,\n                surname: response.profileObj.familyName,\n                image: response.profileObj.imageUrl\n            },\n            token: response.tokenId\n        }\n        await apiDatabase.post(\n            `/user/${response.googleId}/${response.profileObj.givenName}/${\n                response.profileObj.familyName\n            }/${base64.encode(response.profileObj.imageUrl)}`\n        )\n        dispatch({ type: 'LOGIN', data: newData })\n    }\n\n    const badResponseGoogle = (response: string) => {\n        dispatch({ type: 'BAD_RESPONSE', data: null })\n    }\n\n    const logout = () => {\n        const newData = { data: data }\n        newData.data.auth.authenticated = false\n        dispatch({ type: 'LOGOUT', data: newData })\n    }\n\n    return (\n        <Auth>\n            {authenticated ? (\n                <GoogleLogout\n                    clientId=\"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\"\n                    onLogoutSuccess={logout}\n                    render={(renderProps) => (\n                        <BtnGoogle\n                            onClick={renderProps.onClick}\n                            disabled={renderProps.disabled}\n                        >\n                            Logout\n                        </BtnGoogle>\n                    )}\n                ></GoogleLogout>\n            ) : (\n                <GoogleLogin\n                    clientId=\"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\"\n                    onSuccess={login}\n                    onFailure={badResponseGoogle}\n                    cookiePolicy={'single_host_origin'}\n                    isSignedIn={true}\n                    render={(renderProps) => (\n                        <BtnGoogle\n                            onClick={renderProps.onClick}\n                            disabled={renderProps.disabled}\n                        >\n                            Sign In w/ Google\n                        </BtnGoogle>\n                    )}\n                />\n            )}\n        </Auth>\n    )\n}\n\nexport default Authentication\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    grid-area: LG;\n    flex: 1;\n    display: flex;\n    align-items: center;\n    color: var(--white);\n    background-color: var(--tertiary);\n    padding: 20px;\n`\n\nexport const UserInfo = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const Avatar = styled.img`\n    width: 39px;\n    height: 39px;\n    flex-shrink: 0;\n    border-radius: 50%;\n    background: var(--gray);\n    margin: 0 0 0 20px;\n`\nexport const Auth = styled.div`\n    flex: 1;\n    display: flex;\n    justify-content: flex-end  \n`\n","import React  from 'react'\nimport Authentication from '../Authentication'\nimport { useSelector } from 'react-redux'\nimport { Container, Avatar, UserInfo, Auth } from './styles'\nimport { Data } from '../Interface'\n\nconst Navbar: React.FC = () => {\n    const dataAuth = useSelector((state: Data) => state.data.auth)\n\n    return (\n        <Container>\n            {dataAuth.authenticated ? (\n                <UserInfo>\n                    <span>Welcome, {dataAuth.user.name}!</span>\n                    <Avatar src={dataAuth.user.image} />\n                </UserInfo>\n            ) : (\n                <></>\n            )}\n            <Auth>\n                <Authentication />\n            </Auth>\n        </Container>\n    )\n}\n\nexport default Navbar\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    @media (min-width: 1024px) {\n        grid-area: UL;\n        display: flex;\n        flex-direction: column;\n        padding: 3px 6px 0 16px;\n        background-color: var(--secondary);\n        max-height: calc(100vh - 46px);\n        overflow-y: scroll;\n        ::-webkit-scrollbar {\n            width: 4px;\n        }\n        ::-webkit-scrollbar-thumb {\n            background-color: var(--tertiary);\n            border-radius: 4px;\n        }\n        ::-webkit-scrollbar-track {\n            background-color: var(--secondary);\n        }\n        max-height: calc(100vh - 46px);\n    }\n    display: none;\n`;\n\nexport const Role = styled.span`\n    margin-top: 20px;\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: 500;\n    color: var(--gray);\n`;\n\nexport const User = styled.div`\n    margin-top: 5px;\n    padding: 5px;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    border-radius: 4px;\n    background: transparent;\n    transition: background 0.2s;\n    &:hover {\n        background: rgba(255, 255, 255, 0.1);\n    }\n\n    > strong {\n        margin-left: 13px;\n        font-weight: 500;\n        color: var(--white);\n        opacity: 0.7;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n\n    > span {\n        margin-left: 9px;\n        background-color: var(--discord);\n        color: var(--white);\n        border-radius: 4px;\n        padding: 4px 5px;\n        text-transform: uppercase;\n        font-weight: bold;\n        font-size: 11px;\n    }\n`;\n\nexport const Avatar = styled.img`\n    width: 32;\n    height: 32px;\n    flex-shrink: 0;\n    border-radius: 50%;\n    background: var(--gray);\n    margin: 0 0 0 0px;\n`;\n","import React from 'react'\nimport base64 from 'base-64'\nimport { useSelector } from 'react-redux'\nimport { User, UserApi, Data } from '../Interface'\nimport { Container, Role, User as UserElem, Avatar } from './styles'\n\nexport interface Props {\n    user: {\n        firstName: string;\n        lastName: string;\n        imageUrl: string;\n    }\n    score: number\n}\n\nconst UserRow: React.FC<Props> = ({ user, score }) => {\n    return (\n        <UserElem>\n            <Avatar src={base64.decode(user.imageUrl)} />\n            <strong>{user.firstName} {user.lastName}</strong>\n            <span>{score}</span>\n        </UserElem>\n    )\n}\n\nconst UserList: React.FC = () => {\n    const globalScore: User[] = useSelector((state: Data) => state.data.globalScore)\n    const listOfUsers: UserApi[] = useSelector((state: Data) => state.data.listOfUsers)\n    const challengeScore: User[] = useSelector((state: Data) => state.data.challengeScore)\n    const challengeName: string = useSelector((state: Data) => state.data.selectedChallenge.name)\n\n    return (\n        <Container>\n            {challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role>}\n            {challengeScore && challengeScore.length > 0 && listOfUsers ? (\n                challengeScore.map(function (element, i) {\n                    const getUser: UserApi[] = listOfUsers.filter((element2) => {\n                        return element2.userId === element.userId\n                    })\n                    const user = getUser.pop()\n                    if (user) {\n                        return <UserRow key={i} user={user} score={element.score} />\n                    } else {\n                        return <></>\n                    }\n                })\n            ) : globalScore && listOfUsers && !challengeName ? (\n                globalScore.map(function (element, i) {\n                    const getUser: UserApi[] = listOfUsers.filter((element2) => {\n                        return element2.userId === element.userId\n                    })\n                    const user = getUser.pop()\n                    if (user) {\n                        return <UserRow key={i} user={user} score={element.score} />\n                    } else {\n                        return <></>\n                    }\n                })\n            ) : (\n                <></>\n            )}\n        </Container>\n    )\n}\n\nexport default UserList\n","\nimport styled from 'styled-components'\n\nexport const LoginInfo = styled.div`\n    text-align: center;\n    padding: 20px;\n    color: var(--gray);\n`\n\nexport const LoginMessage = styled.div`\n    margin-right: 15px;\n    margin-left: 15px;\n`\n","import React from 'react'\n\nimport base64 from 'base-64'\nimport apiDatabase from '../../services/apiDatabase'\nimport { Data } from '../Interface'\nimport { Col, Row } from 'react-bootstrap'\nimport { BtnGoogle } from '../Authentication/styles'\nimport { GoogleLogin } from 'react-google-login'\nimport { LoginInfo, LoginMessage } from './styles'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Challenge: React.FC = () => {\n    const dispatch = useDispatch()\n    const data = useSelector((state: Data) => state.data)\n\n    const login = async (response: any) => {\n        const newData = { data: data }\n        newData.data.auth = {\n            authenticated: true,\n            user: {\n                id: response.googleId,\n                name: response.profileObj.givenName,\n                surname: response.profileObj.familyName,\n                image: response.profileObj.imageUrl\n            },\n            token: response.tokenId\n        }\n        await apiDatabase.post(\n            `/user/${response.googleId}/${response.profileObj.givenName}/${\n                response.profileObj.familyName\n            }/${base64.encode(response.profileObj.imageUrl)}`\n        )\n        dispatch({ type: 'LOGIN', data: newData })\n    }\n\n    const badResponseGoogle = (response: string) => {\n        dispatch({ type: 'BAD_RESPONSE', data: null })\n    }\n\n    return (\n        <LoginMessage>\n            <Row>\n                <Col xs={12} className=\"text-center\">\n                    <LoginInfo>You need to <GoogleLogin\n                        clientId='156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com'\n                        buttonText='Login'\n                        onSuccess={login}\n                        onFailure={badResponseGoogle}\n                        cookiePolicy={'single_host_origin'}\n                        isSignedIn={true}\n                        render={renderProps => (\n                            <BtnGoogle onClick={renderProps.onClick} disabled={renderProps.disabled}>\n                                Sign In w/ Google\n                            </BtnGoogle>\n                        )}\n                    /> to send your solution!</LoginInfo>\n                </Col>\n            </Row>\n        </LoginMessage>\n                 \n    )\n}\n\nexport default Challenge\n","export function titleCase (str: string) {\n    str = str.split('_').join(' ')\n    const splitStr = str.toLowerCase().split(' ')\n    for (let i = 0; i < splitStr.length; i++) {\n    // You do not need to check if i is larger than splitStr length, as your for does that for you\n    // Assign it back to the array\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n    }\n    // Directly return the joined string\n    return splitStr.join(' ')\n}\n\nexport const config = {\n    headers: {\n        Authorization: `Basic ${(process.env.REACT_APP_APIKEY || 'null')}`,\n        Accept: 'application/vnd.github.antiope-preview+json'\n    }\n}","import styled from 'styled-components'\n\nexport const ContainerDescription = styled.div`\n    grid-area: CD;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    background-color: var(--primary);\n`\n\nexport const Info = styled.div`\n    padding: 30px;\n    display: flex;\n    flex-direction: column;\n    color: var(--white);\n    ::-webkit-scrollbar {\n        width: 8px;\n    }\n    ::-webkit-scrollbar-thumb {\n        background-color: var(--tertiary);\n        border-radius: 4px;\n    }\n    ::-webkit-scrollbar-track {\n        background-color: var(--secondary);\n    }\n`\n\nexport const ContainerInfo = styled.div`\n    grid-area: CI;\n    display: flex;\n    align-items: center;\n    padding: 0 17px;\n    background-color: var(--primary);\n    box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 0px 0px;\n    z-index: 2;\n`\n\nexport const Title = styled.h1`\n    margin-left: 9px;\n    font-size: 16px;\n    font-weight: bold;\n    color: var(--white);\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n`\n\nexport const Separator = styled.div`\n    height: 24px;\n    width: 1px;\n    background-color: var(--white);\n    opacity: 0.2;\n    margin: 0 13px;\n`","import React from 'react'\nimport base64 from 'base-64'\nimport ReactMarkdown from 'react-markdown'\nimport { Data } from '../Interface'\nimport { titleCase } from '../Utils'\nimport { useSelector } from 'react-redux'\nimport { ContainerInfo, ContainerDescription, Title, Separator, Info } from './styles'\n\nconst ChallengeInfo: React.FC = () => {\n    const challengeIndex = useSelector((state: Data) => state.data.challengeIndex)\n    const selectedChallengeName = useSelector((state: Data) => state.data.selectedChallenge.name)\n\n    return (\n        <>\n            <ContainerInfo>\n                <Title>\n                    {titleCase(selectedChallengeName.split('/')[1] as string)}\n                </Title>\n                <Separator />\n            </ContainerInfo>\n            <ContainerDescription>\n                <Info>\n                    {challengeIndex && base64.decode(challengeIndex.content).length > 1\n                        ? <ReactMarkdown source={base64.decode(challengeIndex.content)} />\n                        : ''}\n                </Info>\n            </ContainerDescription>\n        </>\n    )\n}\n\nexport default ChallengeInfo\n","import axios from 'axios'\n\nconst apiCodeContest = axios.create({\n    baseURL: 'https://api.github.com/repos/minecode/code_contest_responses'\n})\n\nexport default apiCodeContest\n","import styled from 'styled-components'\nimport AceEditor from \"react-ace\"\n\nexport const Container = styled.div`\n    grid-area: DF;\n`\n\nexport const SubmitButton = styled.button`\n    align-items: center;\n    background: var(--discord);\n    border-radius: 4px;\n    margin: 20px;\n    padding: 0 12px;\n    &:hover {\n        background: var(--link);\n        cursor: pointer;\n    }\n`\n\nexport const ChallengeCodeFiles = styled.div`\n    text-align: center;\n    padding: 20px;\n    color: var(--gray);\n    > div {\n        width: 100% !important;\n    }\n`\n\nexport const Editor = styled(AceEditor)`\n    * {\n        font-family: inherit;\n    }\n`\nexport const ChallengeCodeFilesZone = styled.div`\n    > span {\n        font-size: 2rem;\n        color: var(--gray);\n    }\n    > p {\n        margin-bottom: 10px;\n    }\n    &:hover {\n        cursor: pointer;\n    }\n`","import React, { useState, useEffect } from 'react'\nimport base64 from 'base-64'\nimport Dropzone from 'react-dropzone'\nimport apiCodeContest from '../../services/apiCodeContest'\nimport { config } from '../Utils'\nimport { useSelector } from 'react-redux'\nimport { Data, BodyRequest } from '../Interface'\nimport { Modal, Spinner, Col, Row } from 'react-bootstrap'\nimport { Container, ChallengeCodeFiles, SubmitButton, ChallengeCodeFilesZone, Editor } from './styles'\nimport 'ace-builds/src-noconflict/mode-python'\nimport 'ace-builds/src-noconflict/theme-dracula'\n\n\nconst ChallengeCode: React.FC = () => {\n    const dataAuth = useSelector((state: Data) => state.data.auth)\n    const selectedChallengeName = useSelector((state: Data) => state.data.selectedChallenge.name)\n\n    const [show, setShow] = useState(false)\n    const [fileName, setFileName] = useState('')\n    const [inProgress, setInProgress] = useState(false)\n    const [bodyRequest, setBodyRequest] = useState <BodyRequest | null >(null)\n    const [currentChallengeName, setCurrentChallengeName] = useState<string>('challenge')\n\n    const handleClose = () => setShow(false)\n    const handleShow = () => setShow(true)\n\n    if (selectedChallengeName && selectedChallengeName !== currentChallengeName) {\n        setShow(false)\n        setFileName('')\n        setInProgress(false)\n        setBodyRequest(null)\n        setCurrentChallengeName(selectedChallengeName)\n    }\n\n    const handleChallengeCode = (acceptedFile: any) => {\n        setFileName(acceptedFile.map((file: any) => {\n            const reader = new FileReader()\n            reader.readAsDataURL(file)\n            reader.addEventListener('load', async () => {\n                if (reader) {\n                    const result = (reader.result as string).split(',')[1]\n\n                    const bodyRequest: BodyRequest = {\n                        message: `${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n                        committer: {\n                            name: 'minecodebot',\n                            email: 'minecode.geral@gmail.com'\n                        },\n                        content: `${result}`\n                    }\n\n                    try {\n                        const fileAlreadyExist = await apiCodeContest.get(`/contents/${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, config)\n                        bodyRequest.sha = `${fileAlreadyExist.data.sha}`\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    setBodyRequest(bodyRequest)\n                }\n            }, false)\n            return file.name\n        }))\n    }\n\n    const submitFile = async () => {\n        setInProgress(true)\n        await apiCodeContest.put(`/contents/${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, bodyRequest, config)\n    }\n\n    const submitCode = async () => {\n        setInProgress(true)\n        await apiCodeContest.put(`/contents/${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, bodyRequest, config)\n    }\n\n    const onChange = async (newValue: string) => {\n        const bodyRequest: BodyRequest = {\n            message: `${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n            committer: {\n                name: 'minecodebot',\n                email: 'minecode.geral@gmail.com'\n            },\n            content: `${base64.encode(newValue)}`\n        }\n\n        try {\n            const fileAlreadyExist = await apiCodeContest.get(`/contents/${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, config)\n            bodyRequest.sha = `${fileAlreadyExist.data.sha}`\n        } catch (error) {\n            console.log(error)\n        }\n        setBodyRequest(bodyRequest)\n    }\n\n    const uploadRepoCode = async () => {\n        try {\n            const getCodeSended = await apiCodeContest.get(`/contents/${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, config)\n            const bodyRequest: BodyRequest = {\n                message: `${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n                committer: {\n                    name: 'minecodebot',\n                    email: 'minecode.geral@gmail.com'\n                },\n                content: `${getCodeSended.data.content}`\n            }\n            setBodyRequest(bodyRequest)\n        } catch {\n            const bodyRequest: BodyRequest = {\n                message: `${selectedChallengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n                committer: {\n                    name: 'minecodebot',\n                    email: 'minecode.geral@gmail.com'\n                },\n                content: `${base64.encode('# Place your code here')}`\n            }\n            setBodyRequest(bodyRequest)\n        }\n    }\n\n    useEffect(() => {\n        uploadRepoCode()\n    // eslint-disable-next-line\n    }, [selectedChallengeName])\n\n    return (\n        <Container>\n            {selectedChallengeName && selectedChallengeName.split('/')[1].length > 0 ? \n                <ChallengeCodeFiles>\n                    {bodyRequest ?\n                        <>\n                            <Editor debounceChangePeriod={1000}\n                                mode='python'\n                                theme='dracula'\n                                onChange={onChange}\n                                name='codeeditor1'\n                                fontSize={18}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                editorProps={{ $blockScrolling: true }}\n                                value={base64.decode(bodyRequest.content)}\n                                setOptions={{\n                                    enableBasicAutocompletion: false,\n                                    enableLiveAutocompletion: false,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2\n                                }}\n                            />\n                            <SubmitButton onClick={() => { submitCode(); handleShow() }}>Submit code</SubmitButton>\n                            <h2>or</h2>\n                        </> : <></>\n                    }\n                    <Dropzone\n                        onDrop={handleChallengeCode}\n                    >\n                        {({\n                            getRootProps,\n                            getInputProps,\n                            isDragActive,\n                            isDragReject\n                        }) => {\n                            return (\n                                <ChallengeCodeFilesZone {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <span>{isDragActive ? '📂' : '📁'}</span>\n                                    <p>\n                                        {fileName ? <>{fileName}</> : isDragReject ? <> Invalid file </> : <>Drag & ChallengeCode images, or click to select files</>}\n                                    </p>\n                                </ChallengeCodeFilesZone>\n                            )\n                        }}\n                    </Dropzone>\n                    {inProgress ? <Modal\n                        show={show}\n                        onHide={handleClose}\n                        backChallengeCode='static'\n                    >\n                        <Modal.Header closeButton>\n                            <Modal.Title>Test in progress...</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Container>\n                                <Row>\n                                    <Col xs={12} className='text-center'>\n                                        <Spinner animation='border' />\n                                    </Col>\n                                    <Col xs={12} className='text-center'>\n                                        <p>We are testing your solution... Soon as possibel, your pontuation will be upadated!!</p>\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </Modal.Body>\n                    </Modal> : fileName.length > 0 && bodyRequest ? <SubmitButton onClick={() => { submitFile(); handleShow() }}>Submit file</SubmitButton> : <></>}\n                </ChallengeCodeFiles> : <></>\n            }\n        </Container>\n    )\n}\n\nexport default ChallengeCode\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    grid-area: C;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    background-color: var(--primary);\n    max-height: calc(100vh - 46px);\n    overflow-y: scroll;\n`\n\nexport const Grid = styled.div`\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: 46px auto auto;\n    grid-template-areas:\n        'CI'\n        'CD'\n        'DF';\n    height: 100vh;\n`","import React from 'react'\nimport { Data } from '../Interface'\nimport { useSelector } from 'react-redux'\nimport LoginMessage from '../LoginMessage'\nimport ChallengeInfo from '../ChallengeInfo'\nimport ChallengeCode from '../ChallengeCode'\nimport { Container, Grid } from './styles'\n\nconst Challenge: React.FC = () => {\n    const authenticated = useSelector((state: Data) => state.data.auth.authenticated)\n    const selectedChallengeName = useSelector((state: Data) => state.data.selectedChallenge.name)\n\n    return (\n        <Container>\n            <Grid>\n                {selectedChallengeName ? (\n                    <>\n                        <ChallengeInfo />\n                        {authenticated ? \n                            <ChallengeCode /> :\n                            <LoginMessage />\n                        }\n                    </>\n                ) : (\n                    <>Place home page here!</>\n                )}\n            </Grid>\n        </Container>\n    )\n}\n\nexport default Challenge\n","import styled from 'styled-components'\nimport { EmojiFoodBeverage } from 'styled-icons/material-outlined'\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    padding: 5px 3px;\n    border-radius: 5px;\n    background-color: transparent;\n    transition: background-color 0.2s;\n    > div {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n    > div span {\n        color: var(--senary);\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n    &:hover,\n    &.active {\n        background-color: var(--quinary);\n        > div span {\n            color: var(--white);\n        }\n    }\n`\n\nexport const Contest = styled.div`\n    width: 100%\n`\n\nexport const ContestIcon = styled(EmojiFoodBeverage)`\n    width: 20px;\n    height: 20px;\n    color: var(--symbol);\n    margin: 0 5px;\n`\n","import React from 'react'\nimport { Data } from '../Interface'\nimport { titleCase } from '../Utils'\nimport { useSelector } from 'react-redux'\nimport { Container, ContestIcon, Contest} from './styles'\n\nexport interface Props {\n    contestName: string\n    size: number\n}\n\nconst ContestButton: React.FC<Props> = ({ contestName, size }) => {\n    const dataAuth = useSelector((state: Data) => state.data.auth)\n    const userScore = useSelector((state: Data) => state.data.userScore)\n    const challengeList = useSelector((state: Data) => state.data.challengeList)\n    const selectedChallengeName = useSelector((state: Data) => state.data.selectedChallenge.name)\n\n    return (\n        <Container className={selectedChallengeName && contestName.split('/')[0].toUpperCase() === selectedChallengeName.split('/')[0].split(' ').join('_').toUpperCase() ? 'active' : ''}>\n            <Contest>\n                <div>\n                    <ContestIcon />\n                    {contestName ? <span>{titleCase(contestName.split('/')[0])}</span> : <></>}\n                </div>\n                {challengeList && dataAuth.authenticated ? userScore ? <span>{challengeList.filter((element) => {\n                    return element.contestId === contestName\n                }).length}/{size}</span> : <span>0/{size}</span> : <></> }\n            </Contest>\n        </Container>\n    )\n}\n\nexport default ContestButton\n","import styled from 'styled-components'\nimport { Hashtag } from 'styled-icons/heroicons-outline'\nimport { Check } from 'styled-icons/material'\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    padding: 5px 3px;\n    border-radius: 5px;\n    background-color: transparent;\n    transition: background-color 0.2s;\n    padding: 0 0 0 20px;\n    > div {\n        display: flex;  \n        justify-content: space-between;\n        align-items: center;\n    }\n    > div span {\n        margin-left: 5px;\n        color: var(--senary);\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n    &:hover,\n    &.active {\n        background-color: var(--quinary);\n        > div span {\n            color: var(--white);\n        }\n    }\n`\n\nexport const Challenge = styled.div`\n    width: 100%\n`\n\nexport const HashtagIcon = styled(Hashtag)`\n    width: 20px;\n    height: 20px;\n    color: var(--symbol);\n`\n\nexport const CheckIcon = styled(Check)`\n    width: 21px;\n    height: 21px;\n    color: var(--green);\n`\n","import React from 'react'\nimport { titleCase } from '../Utils'\nimport { Data } from '../Interface'\nimport { Container, HashtagIcon, CheckIcon, Challenge } from './styles'\nimport { useSelector } from 'react-redux'\nexport interface Props {\n    challengeName: string;\n}\n\nconst ChallengeButton: React.FC<Props> = ({ challengeName }) => {\n    const authenticated = useSelector((state: Data) => state.data.auth.authenticated)\n    const challengeList = useSelector((state: Data) => state.data.challengeList)\n    const selectedChallengeName = useSelector((state: Data) => state.data.selectedChallenge.name)\n\n    return (\n        <Container\n            className={\n                selectedChallengeName && challengeName.split('/')[0].toUpperCase() === selectedChallengeName.split('/')[0].split(' ').join('_').toUpperCase() && challengeName.split('/')[1].toUpperCase() === selectedChallengeName.split('/')[1].split(' ').join('_').toUpperCase() ? 'active' : ''}\n        >\n            <Challenge>\n                <div>\n                    <HashtagIcon />\n                    {challengeName ? (\n                        <span>{titleCase(challengeName.split('/')[1])}</span>\n                    ) : (\n                        <></>\n                    )}\n                </div>\n                {authenticated && challengeList && challengeList.filter((challenge) => {\n                    return (\n                        challenge.challengeId.toUpperCase() === challengeName.split('/')[1].toUpperCase() && challenge.contestId.toUpperCase() === challengeName.split('/')[0].toUpperCase()\n                    )\n                }).length > 0 ? (\n                        <CheckIcon />\n                    ) : (\n                        <></>\n                    )}\n            </Challenge>\n        </Container>\n    )\n}\n\nexport default ChallengeButton\n","import styled from 'styled-components'\n\nexport const ContainerList = styled.div`\n    grid-area: CL;\n    display: flex;\n    flex-direction: column;\n    padding: 24px 9.5px 0 16px;\n    background-color: var(--secondary);\n`\nexport const Category = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 6px;\n    > span {\n        text-transform: uppercase;\n        font-size: 12px;\n        font-weight: 500;\n        color: var(--gray);\n    }\n`\n","import React, { useCallback, useState } from 'react'\nimport ContestButton from '../ContestButton'\nimport ChallengeButton from '../ChallengeButton'\nimport { Challenge, Data } from '../Interface'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ContainerList, Category } from './styles'\n\nconst ContestList: React.FC = () => {\n    const dispatch = useDispatch()\n    const data = useSelector((state: Data) => state.data)\n    const dataTree = useSelector((state: Data) => state.data.tree)\n\n    const [contestsActive, setContestsActive] = useState<string>('')\n\n    const handleSelectChange = useCallback(\n        (contest: string) => {\n            const newData = { data: data }\n            newData.data.selectedChallenge = { name: `${contest}` }\n            dispatch({ type: 'CHALLENGE', data: newData })\n        },\n        [dispatch, data]\n    )\n\n    const handleVisibleContest = (contest: string) => {\n        if (contestsActive === contest) {\n            setContestsActive('')\n            const newData = { data: data }\n            newData.data.selectedChallenge = { name: '' }\n            dispatch({ type: 'CHALLENGE', data: newData })\n        } else {\n            setContestsActive(contest)\n            const newData = { data: data }\n            newData.data.selectedChallenge = { name: `${contest}/` }\n            dispatch({ type: 'CHALLENGE', data: newData })\n        }\n    }\n\n    return (\n        <ContainerList>\n            <Category>\n                <span>Contests</span>\n            </Category>\n            <div id=\"listOfContests\">\n                {dataTree && dataTree?.tree\n          .filter((contest: Challenge) => {\n              return (!contest.path.includes('.github') && (contest.path.split('/').length === 1 || (contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt')))\n          })\n          .map((contest: Challenge, i: number) => (\n              <div key={i}>\n                  {contest.path.split('/').length === 1 ? (\n                      <div\n                          key={i}\n                          id={i.toString()}\n                          onClick={() =>\n                              handleVisibleContest(contest.path.split('/')[0])\n                          }\n                      >\n                          <ContestButton contestName={contest.path}\n                              size={\n                                  dataTree.tree.filter((elem:Challenge) => {\n                                      return (elem.path.includes(contest.path) &&\n                          elem.path.split('/').length === 2 && elem.path.split('/')[1] !== 'requirements.txt'\n                                      )\n                                  }).length\n                              }\n                          ></ContestButton>\n                      </div>\n                  ) : contest.path.split('/').length === 2 &&\n                contestsActive.includes(contest.path.split('/')[0]) ? (\n                          <div\n                              key={i}\n                              id={i.toString()}\n                              className={contest.path.split('/')[0]}\n                              onClick={() => handleSelectChange(contest.path)}\n                          >\n                              <ChallengeButton challengeName={contest.path} />\n                          </div>\n                      ) : (\n                          <></>\n                      )}\n              </div>\n          ))}\n            </div>\n        </ContainerList>\n    )\n}\n\nexport default ContestList\n","import styled from 'styled-components'\n\nexport const Grid = styled.div`\n    display: grid;\n    grid-template-columns: 311px auto;\n    grid-template-rows: 46px auto;\n    grid-template-areas:\n        'LG LG'\n        'CL C';\n    @media (min-width: 1024px) {\n        grid-template-columns: 311px auto 311px;\n        grid-template-rows: 46px auto;\n        grid-template-areas:\n            'LG LG LG'\n            'CL C UL';\n    }\n    height: 100vh;\n`;\n","import useSWR from 'swr'\nimport { config } from '../components/Utils'\nimport apiCodeContest from '../services/apiCodeContest'\n\nexport function useFetch<Data = any, Error = any> (url: string) {\n    const { data, error, mutate } = useSWR<Data, Error>(url, async url => {\n        const response = await apiCodeContest.get(url, config)\n        return response.data\n    }, {\n        revalidateOnFocus: true\n    })\n\n    return { data, error, mutate }\n}\n","import React, { useState, useEffect } from 'react'\nimport Navbar from '../Navbar'\nimport UserList from '../UserList'\nimport Challenge from '../Challenge'\nimport ContestList from '../ContestList'\nimport { Grid } from './styles'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Data, Challenge as ChallengeInterface, User, UserApi, ChallengeContent, Contest } from '../Interface'\n\nconst Layout: React.FC = () => {\n    const dispatch = useDispatch()\n    const data = useSelector((state: Data) => state.data)\n    const userId = useSelector((state: Data) => state.data.auth.user.id)\n    const selectedChallengeName = useSelector((state: Data) => state.data.selectedChallenge.name)\n\n    const { data: globalScore } = useFetch<User[]>('https://code-contest-backend.herokuapp.com/contests/global')\n    const { data: listOfUsers } = useFetch<UserApi[]>('https://code-contest-backend.herokuapp.com/contests/user')\n    const { data: challengeList } = useFetch<ChallengeInterface[]>(`https://code-contest-backend.herokuapp.com/contests/list/${userId}`)\n    const { data: challengeIndex } = useFetch<ChallengeContent>(`/contents/${selectedChallengeName?.split(' ').join('_')}/index.md`)\n    const { data: challengeScore } = useFetch<User[]>(`https://code-contest-backend.herokuapp.com/contests/global/${selectedChallengeName}`)\n    const { data: userScore } = useFetch<User[]>(`https://code-contest-backend.herokuapp.com/contests/${userId}/${selectedChallengeName}`)\n    const { data: dataTree } = useFetch<Contest>('/git/trees/5c51dbca32b9394fe304b519826c1364806cdb9e?recursive=\"true\"')\n\n    const [load, setLoad] = useState(false)\n\n    useEffect(() => {\n        const newData = { data: data }\n        if (globalScore && listOfUsers && challengeScore && userScore && challengeList && dataTree) {\n            console.log('entrou')\n            newData.data.globalScore = globalScore\n            newData.data.listOfUsers = listOfUsers\n            newData.data.challengeScore = challengeScore\n            newData.data.userScore = userScore\n            newData.data.challengeList = challengeList\n            newData.data.tree = dataTree\n            setLoad(true)\n        }\n        if (challengeIndex) {\n            newData.data.challengeIndex = challengeIndex\n\n        }\n        dispatch({ type: 'CHALLENGE', data: newData })\n    }, [globalScore, listOfUsers, challengeScore, userScore, challengeIndex, challengeList, dataTree, dispatch, data])\n\n    return (\n        <Grid>\n            {load ?\n            <>\n                <Navbar />\n                <ContestList />\n                <Challenge />\n                <UserList />\n            </>\n            : <></> }\n        </Grid>\n    )\n}\n\nexport default Layout\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n    html, body, #root {\n        height: 100%;\n    }\n    *, button, input {\n        border: 0;\n        outline: 0;\n        font-family: 'Roboto', sans-serif;\n    }\n    :root {\n        --primary: #36393f;\n        --secondary: #2f3136;\n        --tertiary: rgb(32,34,37);\n        --quaternary: #292b2f;\n        --quinary: #393d42;\n        --senary: #828386;\n        --white: #fff;\n        --gray: #8a8c90;\n        --chat-input: rgb(64,68,75);\n        --symbol: #74777a;\n        --notification: #f84a4b;\n        --discord: #6e86d6;\n        --mention-detail: #f9a839;\n        --mention-message: #413f3f;\n        --link: #5d80d6;\n        --rocketseat: #6633cc;\n        --green: #149414;\n    }\n`\n","import React from 'react'\nimport store from './store'\nimport Layout from './components/Layout'\nimport GlobalStyles from './styles/GlobalStyles'\nimport { Provider } from 'react-redux'\n\nfunction App () {\n    return (\n        <Provider store={store}>\n            <Layout />\n            <GlobalStyles />\n        </Provider>\n    )\n}\n\nexport default App\n","import App from './App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}