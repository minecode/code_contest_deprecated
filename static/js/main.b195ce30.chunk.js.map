{"version":3,"sources":["store/index.tsx","components/Layout/styles.ts","components/Challenge/styles.ts","components/ChallengeInfo/styles.ts","components/Utils/index.tsx","components/ChallengeInfo/index.tsx","components/Drop/styles.ts","services/apiCodeContest.ts","components/Drop/index.tsx","components/Authentication/styles.ts","components/Challenge/index.tsx","components/UserList/styles.ts","components/UserList/index.tsx","components/ContestList/styles.ts","components/ChallengeButton/styles.ts","components/ChallengeButton/index.tsx","components/ContestButton/styles.ts","components/ContestButton/index.tsx","hooks/useFetch.ts","components/ContestList/index.tsx","services/apiDatabase.ts","components/Authentication/index.tsx","components/Navbar/styles.ts","components/Navbar/index.tsx","components/Layout/index.tsx","styles/GlobalStyles.ts","App.tsx","index.tsx"],"names":["INITIAL_STATE","data","auth","authenticated","user","id","name","surname","image","token","selectedChallenge","globalScore","listOfUsers","challengeScore","userScore","challengeIndex","challengeList","store","createStore","state","action","type","Grid","styled","div","Container","LoginInfo","Message","ContainerDescription","Info","ContainerInfo","input","AlternateEmail","Title","Hashtag","h1","Separator","span","titleCase","str","splitStr","split","join","toLowerCase","i","length","charAt","toUpperCase","substring","ChallengeInfo","challengeName","useSelector","base64","decode","content","source","SubmitButton","button","DropFiles","Editor","AceEditor","DropFilesZone","apiCodeContest","axios","create","baseURL","Drop","useState","fileName","setFileName","solution","setSolution","inProgress","setInProgress","sendedFile","setSendedFile","show","setShow","currentChallengeName","setCurrentChallengeName","bodyRequest","setBodyRequest","dataAuth","handleClose","handleShow","config","headers","Authorization","process","Accept","submitFile","a","put","submitCode","onChange","newValue","message","committer","email","encode","get","fileAlreadyExist","sha","console","log","uploadRepoCode","getCodeSended","useEffect","onDrop","acceptedFile","map","file","reader","FileReader","readAsDataURL","addEventListener","result","getRootProps","getInputProps","isDragActive","isDragReject","debounceChangePeriod","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","onClick","Modal","onHide","backdrop","Header","closeButton","Body","Row","Col","xs","className","Spinner","animation","Auth","BtnGoogle","Challenge","authentication","dispatch","useDispatch","clientId","buttonText","onSuccess","response","newData","googleId","profileObj","givenName","familyName","imageUrl","tokenId","onFailure","cookiePolicy","isSignedIn","render","renderProps","disabled","Role","User","Avatar","img","UserRow","score","src","firstName","lastName","UserList","element","filter","element2","userId","pop","key","ContainerList","Category","HashtagIcon","CheckIcon","Check","ChallengeButton","selectedChallengeName","style","width","challengeId","contestId","ContestIcon","EmojiFoodBeverage","ContestButton","contestName","size","useFetch","url","useSWR","revalidateOnFocus","error","mutate","ContestList","contestsActive","setContestsActive","dataTree","handleSelectChange","useCallback","contest","tree","path","includes","toString","handleVisibleContest","elem","apiDatabase","Authentication","login","post","onLogoutSuccess","UserInfo","Navbar","Layout","createGlobalStyle","App","GlobalStyles","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b195ce30.chunk.js","sourcesContent":["import { createStore } from 'redux'\n\nconst INITIAL_STATE = {\n    data: {\n        auth: {\n            authenticated: false,\n            user: {\n                id: null,\n                name: null,\n                surname: null,\n                image: null\n            },\n            token: null\n        },\n        selectedChallenge: {\n            name: null\n        },\n        globalScore: null,\n        listOfUsers: null,\n        challengeScore: null,\n        userScore: null,\n        challengeIndex: null,\n        challengeList: null\n    }\n}\n\nfunction globalStore (state: any, action: any) {\n    switch (action.type) {\n    case 'LOGIN':\n        return action.data\n    case 'LOGOUT':\n        return action.data\n    case 'CHALLENGE':\n        return action.data\n    default:\n        return INITIAL_STATE\n    }\n}\n\nconst store = createStore(globalStore)\n\nexport default store\n","import styled from 'styled-components';\n\nexport const Grid = styled.div`\n\tdisplay: grid;\n\n\tgrid-template-columns: 311px auto;\n\tgrid-template-rows: 46px auto;\n\n\tgrid-template-areas:\n\t\t'LG LG'\n\t\t'CL C';\n\n\t@media (min-width: 1024px) {\n\t\tgrid-template-columns: 311px auto 311px;\n\t\tgrid-template-rows: 46px auto;\n\t\n\t\tgrid-template-areas:\n\t\t\t'LG LG LG'\n\t\t\t'CL C UL';\n\t}\n\n\theight: 100vh;\n`;\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  grid-area: C;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  background-color: var(--primary);\n  max-height: calc(100vh - 46px);\n  overflow-y: scroll;\n`\n\nexport const Grid = styled.div`\n  display: grid;\n\n  grid-template-columns: auto;\n  grid-template-rows: 46px auto auto;\n\n  grid-template-areas:\n    'CI'\n    'CD'\n    'DF';\n\n  height: 100vh;\n`\n\nexport const LoginInfo = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: var(--gray);\n`\n\nexport const Message = styled.div`\n  margin-right: 15px;\n  margin-left: 15px;\n`\n","import styled from 'styled-components'\nimport { Hashtag } from 'styled-icons/heroicons-outline'\nimport { AlternateEmail } from 'styled-icons/material'\n\nexport const ContainerDescription = styled.div`\n  grid-area: CD;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  background-color: var(--primary);\n`\n\nexport const Info = styled.div`\n  padding: 30px;\n\n  display: flex;\n  flex-direction: column;\n\n  /* max-height: calc(100vh - 250px - 46px); */\n  /* overflow-y: scroll; */\n\n  color: var(--white);\n\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background-color: var(--tertiary);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background-color: var(--secondary);\n  }\n`\n\nexport const InputWrapper = styled.div`\n  width: 100%;\n\n  padding: 16px;\n`\n\nexport const Input = styled.input`\n  width: 100%;\n  height: 44px;\n\n  padding: 0 10px 0 57px;\n  border-radius: 7px;\n\n  color: var(--white);\n  background-color: var(--chat-input);\n\n  position: relative;\n\n  &::placeholder {\n    color: var(--gray);\n  }\n\n  ~ svg {\n    position: relative;\n    top: -50%;\n    left: 14px;\n    transition: 180ms ease-in-out;\n  }\n`\n\nexport const InputIcon = styled(AlternateEmail)`\n  width: 24px;\n  height: 24px;\n\n  color: var(--gray);\n`\n\nexport const ContainerInfo = styled.div`\n  grid-area: CI;\n\n  display: flex;\n  align-items: center;\n\n  padding: 0 17px;\n  background-color: var(--primary);\n\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 0px 0px;\n  z-index: 2;\n`\n\nexport const HashtagIcon = styled(Hashtag)`\n  width: 24px;\n  height: 24px;\n\n  color: var(--symbol);\n`\n\nexport const Title = styled.h1`\n  margin-left: 9px;\n\n  font-size: 16px;\n  font-weight: bold;\n\n  color: var(--white);\n\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`\n\nexport const Separator = styled.div`\n  height: 24px;\n  width: 1px;\n\n  background-color: var(--white);\n  opacity: 0.2;\n\n  margin: 0 13px;\n`\n\nexport const Description = styled.span`\n  font-size: 15px;\n  color: var(--gray);\n\n  text-overflow: ellipsis;\n  overflow: hidden;\n`\n","export function titleCase (str: string) {\n    str = str.split('_').join(' ')\n    const splitStr = str.toLowerCase().split(' ')\n    for (let i = 0; i < splitStr.length; i++) {\n    // You do not need to check if i is larger than splitStr length, as your for does that for you\n    // Assign it back to the array\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n    }\n    // Directly return the joined string\n    return splitStr.join(' ')\n}\n","import React from 'react'\n\nimport {\n    ContainerInfo,\n    ContainerDescription,\n    Title,\n    Separator,\n    Info\n} from './styles'\n\nimport base64 from 'base-64'\nimport ReactMarkdown from 'react-markdown'\nimport { titleCase } from '../Utils'\nimport { useSelector } from 'react-redux'\n\nexport interface Props {\n    challengeName?: string;\n}\n\nconst ChallengeInfo: React.FC = () => {\n    const challengeName = useSelector((state: any) => state.data.selectedChallenge.name)\n    const challengeIndex = useSelector((state: any) => state.data.challengeIndex)\n    return (\n        <>\n            <ContainerInfo>\n                <Title>\n                    {titleCase(challengeName.split('/')[1] as string)}\n                </Title>\n                <Separator />\n            </ContainerInfo>\n            <ContainerDescription>\n                <Info>\n                    {challengeIndex && base64.decode(challengeIndex.content).length > 1\n                        ? <ReactMarkdown source={base64.decode(challengeIndex.content)} />\n                        : ''}\n                </Info>\n            </ContainerDescription>\n        </>\n    )\n}\n\nexport default ChallengeInfo\n","import styled from 'styled-components'\nimport AceEditor from \"react-ace\";\n\nexport const Container = styled.div`\n  grid-area: DF;\n`\n\nexport const SubmitButton = styled.button`\n\n  align-items: center;\n  background: var(--discord);\n  border-radius: 4px;\n  margin: 20px;\n  padding: 0 12px;\n\n  &:hover {\n    background: var(--link);\n    cursor: pointer;\n  }\n`\n\nexport const DropFiles = styled.div`\n  text-align: center;\n  padding: 20px;\n  color: var(--gray);\n\n  > div {\n    width: 100% !important;\n    \n  }\n\n`\n\nexport const Editor = styled(AceEditor)`\n    * {\n        font-family: inherit;\n    }\n`\nexport const DropFilesZone = styled.div`\n\n  > span {\n    font-size: 2rem;\n    color: var(--gray);\n  }\n\n  > p {\n    margin-bottom: 10px;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n`","import axios from 'axios'\n\nconst apiCodeContest = axios.create({\n    baseURL: 'https://api.github.com/repos/minecode/code_contest_responses'\n})\n\nexport default apiCodeContest\n","import React, { useState, useEffect } from 'react'\n\nimport base64 from 'base-64'\nimport { Container, DropFiles, SubmitButton, DropFilesZone, Editor } from './styles'\nimport Dropzone from 'react-dropzone'\nimport apiCodeContest from '../../services/apiCodeContest'\n\nimport { Modal, Spinner, Col, Row } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\n\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-dracula\";\n\n\n\ninterface Code {\n    name?: string;\n    content?: string;\n  }\n  \ninterface BodyRequest {\n    [key: string]: any\n}\nconst Drop: React.FC = () => {\n    const [fileName, setFileName] = useState('')\n    const [solution, setSolution] = useState<string>('')\n    const [inProgress, setInProgress] = useState(false)\n    const [sendedFile, setSendedFile] = useState(false)\n    const [show, setShow] = useState(false)\n    const [currentChallengeName, setCurrentChallengeName] = useState<string>('challenge')\n    const [bodyRequest, setBodyRequest] = useState <BodyRequest | null >(null)\n    const challengeName = useSelector((state: any) => state.data.selectedChallenge.name)\n    const dataAuth = useSelector((state: any) => state.data.auth)\n    const handleClose = () => setShow(false)\n    const handleShow = () => setShow(true)\n\n    const config = {\n        headers: {\n            Authorization: `Basic ${(process.env.REACT_APP_APIKEY || 'null')}`,\n            Accept: 'application/vnd.github.antiope-preview+json'\n        }\n    }\n\n    if (challengeName && challengeName !== currentChallengeName) {\n        setCurrentChallengeName(challengeName)\n        setFileName('')\n        setBodyRequest(null)\n        setSendedFile(false)\n        setShow(false)\n        setSolution('')\n        setInProgress(false)\n    }\n\n    const handleDrop = (acceptedFile: any) => {\n        setSendedFile(false)\n        setFileName(acceptedFile.map((file: any) => {\n            const reader = new FileReader()\n            reader.readAsDataURL(file)\n            reader.addEventListener('load', async () => {\n                if (reader) {\n                    const result = (reader.result as string).split(',')[1]\n\n                    const bodyRequest: BodyRequest = {\n                        message: `${challengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n                        committer: {\n                            name: 'minecodebot',\n                            email: 'minecode.geral@gmail.com'\n                        },\n                        content: `${result}`\n                    }\n\n                    try {\n                        const fileAlreadyExist = await apiCodeContest.get(`/contents/${challengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, config)\n                        bodyRequest.sha = `${fileAlreadyExist.data.sha}`\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    setBodyRequest(bodyRequest)\n                }\n            }, false)\n            return file.name\n        }))\n    }\n\n    const submitFile = async () => {\n        setSolution('')\n        setInProgress(true)\n        await apiCodeContest.put(`/contents/${challengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, bodyRequest, config)\n    }\n\n    const submitCode = async () => {\n        setSolution('')\n        setInProgress(true)\n        await apiCodeContest.put(`/contents/${challengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, bodyRequest, config)           \n    }\n\n    const onChange = async (newValue: string) => {\n        const bodyRequest: BodyRequest = {\n            message: `${challengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n            committer: {\n                name: 'minecodebot',\n                email: 'minecode.geral@gmail.com'\n            },\n            content: `${base64.encode(newValue)}`\n        }\n\n        try {\n            const fileAlreadyExist = await apiCodeContest.get(`/contents/${challengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, config)\n            bodyRequest.sha = `${fileAlreadyExist.data.sha}`\n        } catch (error) {\n            console.log(error)\n        }\n        setBodyRequest(bodyRequest)\n\n      }\n\n    const uploadRepoCode = async () => {\n\n        try {\n            const getCodeSended = await apiCodeContest.get(`/contents/${challengeName?.split(' ').join('_')}/${dataAuth.user.id}/resolution.py`, config)\n            const bodyRequest: BodyRequest = {\n                message: `${challengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n                committer: {\n                    name: 'minecodebot',\n                    email: 'minecode.geral@gmail.com'\n                },\n                content: `${getCodeSended.data.content}`\n            }\n            setBodyRequest(bodyRequest)\n        } catch {\n            const bodyRequest: BodyRequest = {\n                message: `${challengeName?.split(' ').join('_')}/${dataAuth.user.id}`,\n                committer: {\n                    name: 'minecodebot',\n                    email: 'minecode.geral@gmail.com'\n                },\n                content: `${base64.encode('# Place your code here')}`\n            }\n            setBodyRequest(bodyRequest)\n        }\n\n    }\n\n    useEffect(() => {\n        uploadRepoCode()\n    // eslint-disable-next-line\n    }, [challengeName])\n\n    return (\n        <Container>\n            {challengeName && challengeName.split('/')[1].length > 0\n                ? <Dropzone\n                    onDrop={handleDrop}\n                >\n                    {({\n                        getRootProps,\n                        getInputProps,\n                        isDragActive,\n                        isDragReject\n                    }) => {\n                        return (\n                            <DropFiles>\n                                {challengeName && bodyRequest ? \n                                    <Editor debounceChangePeriod={1000}\n                                    mode=\"python\"\n                                    theme=\"dracula\"\n                                    onChange={onChange}\n                                    name=\"codeeditor1\"\n                                    fontSize={18}\n                                    showPrintMargin={true}\n                                    showGutter={true}\n                                    highlightActiveLine={true}\n                                    editorProps={{ $blockScrolling: true }}\n                                    value={base64.decode(bodyRequest.content)}\n                                    setOptions={{\n                                        enableBasicAutocompletion: false,\n                                        enableLiveAutocompletion: false,\n                                        enableSnippets: false,\n                                        showLineNumbers: true,\n                                        tabSize: 2,\n                                    }}\n                                  /> : <></>}\n                                    {bodyRequest ? <SubmitButton onClick={() => { submitCode(); handleShow() }}>Submit code</SubmitButton> : <></> }\n                                    <h2>or</h2>\n                                <DropFilesZone {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <span>{isDragActive ? '📂' : '📁'}</span>\n                                    <p>\n                                        {fileName ? <>{fileName}</> : isDragReject ? <> Invalid file </> : <>Drag & drop images, or click to select files</>}\n                                    </p>\n                                </DropFilesZone>\n\n                                {inProgress ? <Modal\n                                    show={show}\n                                    onHide={handleClose}\n                                    backdrop=\"static\"\n                                >\n                                    <Modal.Header closeButton>\n                                        <Modal.Title>Test in progress...</Modal.Title>\n                                    </Modal.Header>\n                                    <Modal.Body>\n                                        <Container>\n                                            <Row>\n                                                <Col xs={12} className=\"text-center\">\n                                                    <Spinner animation=\"border\" />\n                                                </Col>\n                                                <Col xs={12} className=\"text-center\">\n                                                    <p>We are testing your solution... Soon as possibel, your pontuation will be upadated!!</p>\n                                                </Col>\n                                            </Row>\n                                        </Container>\n                                    </Modal.Body>\n                                </Modal>\n                                    : bodyRequest && !sendedFile && fileName.length > 0 ? <SubmitButton onClick={() => { submitFile(); handleShow() }}>Submit file</SubmitButton> : sendedFile && solution ? <p>{solution}</p> : <></>}\n                            </DropFiles>\n                        )\n                    }}\n                </Dropzone> : <></>\n            }\n        </Container>\n    )\n}\n\nexport default Drop\n","import styled from 'styled-components'\n\nexport const Auth = styled.div`\n    grid-area: LG;\n\n    background-color: var(--tertiary);\n`\nexport const BtnGoogle = styled.button`\n    margin:5px;\n    width: 165px;\n    height:35px;\n    border-radius: 4px;\n    background: var(--link);\n    color:white;\n    border:0px transparent;\n    text-align: center;\n\n    &:hover {\n        background: var(--discord)\n    }\n`\n","import React from 'react'\n\nimport { Container, Grid, LoginInfo, Message } from './styles'\nimport { Col, Row } from 'react-bootstrap'\n\nimport ChallengeInfo from '../ChallengeInfo'\n// import ContestList from '../ContestList'\n\nimport Drop from '../Drop'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { GoogleLogin } from 'react-google-login'\nimport { BtnGoogle } from '../Authentication/styles'\n\nconst Challenge: React.FC = () => {\n    const data = useSelector((state: any) => state.data)\n    const authentication = useSelector((state: any) => state.data.auth.authenticated)\n    const challengeName = useSelector((state: any) => state.data.selectedChallenge.name)\n\n    const dispatch = useDispatch()\n\n    const login = (response: any) => {\n        const newData = { data: data }\n\n        newData.data.auth = {\n            authenticated: true,\n            user: {\n                id: response.googleId,\n                name: response.profileObj.givenName,\n                surname: response.profileObj.familyName,\n                image: response.profileObj.imageUrl\n            },\n            token: response.tokenId\n        }\n\n        dispatch({ type: 'LOGIN', data: newData })\n    }\n\n    const badResponseGoogle = (response: any) => {\n        console.log(response)\n        dispatch({ type: 'BAD_RESPONSE', data: null })\n    }\n\n    return (\n        <Container>\n            <Grid>\n                {/* <ContestList /> */}\n                {challengeName ? (\n                    <>\n                        <ChallengeInfo />\n                        {authentication ? (\n                            <Drop />\n                        ) : (\n                            <Message>\n                                <Row>\n                                    <Col xs={12} className=\"text-center\">\n                                        <LoginInfo>You need to <GoogleLogin\n                                            clientId='156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com'\n                                            buttonText='Login'\n                                            onSuccess={login}\n                                            onFailure={badResponseGoogle}\n                                            cookiePolicy={'single_host_origin'}\n                                            isSignedIn={true}\n                                            render={renderProps => (\n                                                <BtnGoogle onClick={renderProps.onClick} disabled={renderProps.disabled}>Sign In w/ Google</BtnGoogle>\n                                            )}\n                                        /> to send your solution!</LoginInfo>\n                                    </Col>\n                                </Row>\n                            </Message>\n                        )}\n                    </>\n                ) : (\n                    <></>\n                )}\n            </Grid>\n        </Container>\n    )\n}\n\nexport default Challenge\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n\t@media (min-width: 1024px) {\n\t\tgrid-area: UL;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 3px 6px 0 16px;\n\t\tbackground-color: var(--secondary);\n\n\t\tmax-height: calc(100vh - 46px);\n\t\toverflow-y: scroll;\n\n\t\t::-webkit-scrollbar {\n\t\t\twidth: 4px;\n\t\t}\n\n\t\t::-webkit-scrollbar-thumb {\n\t\t\tbackground-color: var(--tertiary);\n\t\t\tborder-radius: 4px;\n\t\t}\n\n\t\t::-webkit-scrollbar-track {\n\t\t\tbackground-color: var(--secondary);\n\t\t}\n\t\tmax-height: calc(100vh - 46px);\n\t}\n\n\tdisplay: none;\n`;\n\nexport const Role = styled.span`\n\tmargin-top: 20px;\n\n\ttext-transform: uppercase;\n\tfont-size: 12px;\n\tfont-weight: 500;\n\tcolor: var(--gray);\n`;\n\nexport const User = styled.div`\n\tmargin-top: 5px;\n\tpadding: 5px;\n\n\tdisplay: flex;\n\talign-items: center;\n\n\tcursor: pointer;\n\n\tborder-radius: 4px;\n\tbackground: transparent;\n\ttransition: background 0.2s;\n\t&:hover {\n\t\tbackground: rgba(255, 255, 255, 0.1);\n\t}\n\n\t> strong {\n\t\tmargin-left: 13px;\n\t\tfont-weight: 500;\n\t\tcolor: var(--white);\n\t\topacity: 0.7;\n\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t}\n\n\t> span {\n\t\tmargin-left: 9px;\n\n\t\tbackground-color: var(--discord);\n\t\tcolor: var(--white);\n\t\tborder-radius: 4px;\n\t\tpadding: 4px 5px;\n\n\t\ttext-transform: uppercase;\n\t\tfont-weight: bold;\n\t\tfont-size: 11px;\n\t}\n`;\n\nexport const Avatar = styled.img`\n\twidth: 32;\n\theight: 32px;\n\tflex-shrink: 0;\n\tborder-radius: 50%;\n\tbackground: var(--gray);\n\tmargin: 0 0 0 0px;\n`;\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport base64 from 'base-64'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n    userId?: string;\n    user: UserApi;\n    score: number;\n}\n\ninterface UserApi {\n    userId: string;\n    firstName: string;\n    lastName: string;\n    imageUrl: string;\n}\n\nconst UserRow: React.FC<User> = ({ user, score }) => {\n    return (\n        <User>\n            <Avatar src={base64.decode(user.imageUrl)} />\n            <strong>{user.firstName} {user.lastName}</strong>\n            <span>{score}</span>\n        </User>\n    )\n}\n\nconst UserList: React.FC = () => {\n    const challengeName: string = useSelector((state: any) => state.data.selectedChallenge.name)\n    const globalScore: User[] = useSelector((state: any) => state.data.globalScore)\n    const listOfUsers: UserApi[] = useSelector((state: any) => state.data.listOfUsers)\n    const challengeScore: User[] = useSelector((state: any) => state.data.challengeScore)\n\n    return (\n        <Container>\n            {challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role>}\n            {challengeScore && challengeScore.length > 0 && listOfUsers ? (\n                challengeScore.map(function (element, i) {\n                    const getUser: UserApi[] = listOfUsers.filter((element2) => {\n                        return element2.userId === element.userId\n                    })\n                    const user = getUser.pop()\n                    if (user) {\n                        return <UserRow key={i} user={user} score={element.score} />\n                    } else {\n                        return <></>\n                    }\n                })\n            ) : globalScore && listOfUsers && !challengeName ? (\n                globalScore.map(function (element, i) {\n                    const getUser: UserApi[] = listOfUsers.filter((element2) => {\n                        return element2.userId === element.userId\n                    })\n                    const user = getUser.pop()\n                    if (user) {\n                        return <UserRow key={i} user={user} score={element.score} />\n                    } else {\n                        return <></>\n                    }\n                })\n            ) : (\n                <></>\n            )}\n        </Container>\n    )\n}\n\nexport default UserList\n","import styled from 'styled-components'\n\nexport const ContainerList = styled.div`\n  grid-area: CL;\n\n  display: flex;\n  flex-direction: column;\n\n  padding: 24px 9.5px 0 16px;\n  background-color: var(--secondary);\n`\nexport const Category = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  margin-bottom: 6px;\n\n  > span {\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: 500;\n    color: var(--gray);\n  }\n`\n","import styled from 'styled-components'\nimport { Hashtag } from 'styled-icons/heroicons-outline'\nimport { Check } from 'styled-icons/material'\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  cursor: pointer;\n\n  padding: 5px 3px;\n  border-radius: 5px;\n\n  background-color: transparent;\n\n  transition: background-color 0.2s;\n\n  padding: 0 0 0 20px;\n\n  > div {\n    display: flex;  \n    justify-content: space-between;\n    align-items: center;\n  }\n\n  > div span {\n    margin-left: 5px;\n    color: var(--senary);\n\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n\n  &:hover,\n  &.active {\n    background-color: var(--quinary);\n\n    > div span {\n      color: var(--white);\n    }\n  }\n`\n\nexport const HashtagIcon = styled(Hashtag)`\n  width: 20px;\n  height: 20px;\n\n  color: var(--symbol);\n`\n\nexport const CheckIcon = styled(Check)`\n  width: 21px;\n  height: 21px;\n  color: var(--green);\n`\n","import React from 'react'\nimport { titleCase } from '../Utils'\n\nimport { Container, HashtagIcon, CheckIcon } from './styles'\nimport { useSelector } from 'react-redux'\n\nexport interface Props {\n    challengeName: string;\n}\nexport interface Challenge {\n    id: string;\n    userId: string;\n    contestId: string;\n    challengeId: string;\n    score: number;\n}\n\nconst ChallengeButton: React.FC<Props> = ({ challengeName }) => {\n    const selectedChallengeName = useSelector(\n        (state: any) => state.data.selectedChallenge.name\n    )\n    const challengeList: Challenge[] = useSelector(\n        (state: any) => state.data.challengeList\n    )\n\n    return (\n        <Container\n            className={\n                selectedChallengeName && challengeName.split('/')[0] === selectedChallengeName.split('/')[0].split(' ').join('_') && challengeName.split('/')[1] === selectedChallengeName.split('/')[1].split(' ').join('_') ? 'active' : ''}\n        >\n            <div style={{ width: '100%' }}>\n                <div>\n                    <HashtagIcon />\n                    {challengeName ? (\n                        <span>{titleCase(challengeName.split('/')[1])}</span>\n                    ) : (\n                        <></>\n                    )}\n                </div>\n                {challengeList && challengeList.filter((element) => {\n                    return (\n                        element.challengeId.toUpperCase() === challengeName.split('/')[1].toUpperCase() && element.contestId.toUpperCase() === challengeName.split('/')[0].toUpperCase()\n                    )\n                }).length > 0 ? (\n                        <CheckIcon />\n                    ) : (\n                        <></>\n                    )}\n            </div>\n        </Container>\n    )\n}\n\nexport default ChallengeButton\n","import styled from 'styled-components'\nimport { EmojiFoodBeverage } from 'styled-icons/material-outlined'\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  cursor: pointer;\n\n  padding: 5px 3px;\n  border-radius: 5px;\n\n  background-color: transparent;\n\n  transition: background-color 0.2s;\n\n\n  > div {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  > div span {\n    color: var(--senary);\n\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n\n  &:hover,\n  &.active {\n    background-color: var(--quinary);\n\n    > div span {\n      color: var(--white);\n    }\n  }\n`\n\nexport const ContestIcon = styled(EmojiFoodBeverage)`\n  width: 20px;\n  height: 20px;\n\n  color: var(--symbol);\n  margin: 0 5px;\n`\n","import React from 'react'\nimport { titleCase } from '../Utils'\n\nimport { Container, ContestIcon } from './styles'\nimport { useSelector } from 'react-redux'\n\nexport interface Props {\n    contestName: string\n    size: number\n}\n\nexport interface Challenge {\n    id: string,\n    userId: string,\n    contestId: string,\n    challengeId: string,\n    score: number\n}\nconst ContestButton: React.FC<Props> = ({ contestName, size }) => {\n    const dataAuth = useSelector((state: any) => state.data.auth)\n    const selectedChallengeName = useSelector((state: any) => state.data.selectedChallenge.name)\n    const userScore = useSelector((state: any) => state.data.userScore)\n    const challengeList: Challenge[] = useSelector((state: any) => state.data.challengeList)\n\n    return (\n        <Container className={selectedChallengeName && contestName.split('/')[0] === selectedChallengeName.split('/')[0].split(' ').join('_') ? 'active' : ''}>\n            <div style={{ width: '100%' }}>\n                <div>\n                    <ContestIcon />\n                    {contestName ? <span>{titleCase(contestName.split('/')[0])}</span> : <></>}\n                </div>\n                {challengeList && dataAuth.authenticated ? userScore ? <span>{challengeList.filter((element) => {\n                    return element.contestId === contestName\n                }).length}/{size}</span> : <span>0/{size}</span> : <></> }\n            </div>\n        </Container>\n    )\n}\n\nexport default ContestButton\n","import useSWR from 'swr'\nimport apiCodeContest from '../services/apiCodeContest'\n\nexport function useFetch<Data = any, Error = any> (url: string) {\n    const { data, error, mutate } = useSWR<Data, Error>(url, async url => {\n        const config = {\n            headers: {\n                Authorization: `Basic ${(process.env.REACT_APP_APIKEY || 'null')}`,\n                Accept: 'application/vnd.github.preview+json'\n            }\n        }\n        const response = await apiCodeContest.get(url, config)\n        return response.data\n    }, {\n        revalidateOnFocus: true\n    })\n\n    return { data, error, mutate }\n}\n","import React, { useCallback, useState } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\nimport ContestButton from '../ContestButton'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Contest {\n    tree: Challenge[];\n}\n\ninterface Challenge {\n    path: string;\n}\n\nconst ContestList: React.FC = () => {\n    const dispatch = useDispatch()\n    const data = useSelector((state: any) => state.data)\n\n    const [contestsActive, setContestsActive] = useState<string>('')\n\n    const { data: dataTree } = useFetch<Contest>(\n        '/git/trees/45a03b077a6c35310942f1f493a3a9c3f042f6c4?recursive=\"true\"'\n    )\n\n    const handleSelectChange = useCallback(\n        (contest: string) => {\n            const newData = { data: data }\n\n            newData.data.selectedChallenge = { name: `${contest}` }\n\n            dispatch({ type: 'CHALLENGE', data: newData })\n        },\n        [dispatch, data]\n    )\n\n    const handleVisibleContest = (contest: any) => {\n        if (contestsActive === contest) {\n            setContestsActive('')\n            const newData = { data: data }\n            newData.data.selectedChallenge = { name: null }\n\n            dispatch({ type: 'CHALLENGE', data: newData })\n        } else {\n            setContestsActive(contest)\n            const newData = { data: data }\n            newData.data.selectedChallenge = { name: `${contest}/` }\n\n            dispatch({ type: 'CHALLENGE', data: newData })\n        }\n    }\n\n    return (\n        <ContainerList>\n            <Category>\n                <span>Contests</span>\n            </Category>\n            <div id=\"listOfContests\">\n                {dataTree?.tree\n          .filter((contest: any, i: number) => {\n              return ( !contest.path.includes('.github') && (contest.path.split('/').length === 1 || (contest.path.split('/').length === 2 &&\n                contest.path.split('/')[1] !== 'requirements.txt'))\n              )\n          })\n          .map((contest: any, i: number) => (\n              <div key={i}>\n                  {contest.path.split('/').length === 1 ? (\n                      <div\n                          key={i}\n                          id={i.toString()}\n                          onClick={() =>\n                              handleVisibleContest(contest.path.split('/')[0])\n                          }\n                      >\n                          <ContestButton\n                              contestName={contest.path}\n                              size={\n                                  dataTree.tree.filter((elem:Challenge) => {\n                                      return (elem.path.includes(contest.path) &&\n                          elem.path.split('/').length === 2 && elem.path.split('/')[1] !== 'requirements.txt'\n                                      )\n                                  }).length\n                              }\n                          ></ContestButton>\n                      </div>\n                  ) : contest.path.split('/').length === 2 &&\n                contestsActive.includes(contest.path.split('/')[0]) ? (\n                          <div\n                              key={i}\n                              id={i.toString()}\n                              className={contest.path.split('/')[0]}\n                              onClick={() => handleSelectChange(contest.path)}\n                          >\n                              <ChallengeButton challengeName={contest.path} />\n                          </div>\n                      ) : (\n                          <></>\n                      )}\n              </div>\n          ))}\n            </div>\n        </ContainerList>\n    )\n}\n\nexport default ContestList\n","import axios from 'axios'\n\nconst apiDatabase = axios.create({\n    baseURL: 'https://code-contest-backend.herokuapp.com/contests'\n})\n\nexport default apiDatabase\n","import React from 'react'\n\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'\nimport { useDispatch, useSelector } from 'react-redux'\nimport base64 from 'base-64'\nimport apiDatabase from '../../services/apiDatabase'\n\nimport { Auth, BtnGoogle } from './styles'\n\nconst Authentication: React.FC = () => {\n    const data = useSelector((state: any) => state.data)\n    const authentication = useSelector(\n        (state: any) => state.data.auth.authenticated\n    )\n\n    const dispatch = useDispatch()\n\n    const login = async (response: any) => {\n        const newData = { data: data }\n        newData.data.auth = {\n            authenticated: true,\n            user: {\n                id: response.googleId,\n                name: response.profileObj.givenName,\n                surname: response.profileObj.familyName,\n                image: response.profileObj.imageUrl\n            },\n            token: response.tokenId\n        }\n        await apiDatabase.post(\n            `/user/${response.googleId}/${response.profileObj.givenName}/${\n                response.profileObj.familyName\n            }/${base64.encode(response.profileObj.imageUrl)}`\n        )\n        dispatch({ type: 'LOGIN', data: newData })\n    }\n\n    const badResponseGoogle = (response: any) => {\n        console.log(response)\n        dispatch({ type: 'BAD_RESPONSE', data: null })\n    }\n\n    const logout = () => {\n        const newData = { data: data }\n        newData.data.auth = {\n            authenticated: false,\n            user: {\n                id: null,\n                name: null,\n                surname: null,\n                image: null\n            },\n            token: null\n        }\n        dispatch({ type: 'LOGOUT', data: newData })\n    }\n\n    return (\n        <Auth>\n            {authentication ? (\n                <GoogleLogout\n                    clientId=\"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\"\n                    buttonText=\"Logout\"\n                    onLogoutSuccess={logout}\n                    className=\"BtnGoogle\"\n                    render={(renderProps) => (\n                        <BtnGoogle\n                            onClick={renderProps.onClick}\n                            disabled={renderProps.disabled}\n                        >\n              Logout\n                        </BtnGoogle>\n                    )}\n                ></GoogleLogout>\n            ) : (\n                <GoogleLogin\n                    clientId=\"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\"\n                    buttonText=\"Login\"\n                    onSuccess={login}\n                    onFailure={badResponseGoogle}\n                    cookiePolicy={'single_host_origin'}\n                    isSignedIn={true}\n                    render={(renderProps) => (\n                        <BtnGoogle\n                            onClick={renderProps.onClick}\n                            disabled={renderProps.disabled}\n                        >\n              Sign In w/ Google\n                        </BtnGoogle>\n                    )}\n                />\n            )}\n        </Auth>\n    )\n}\n\nexport default Authentication\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  grid-area: LG;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  color: var(--white);\n  background-color: var(--tertiary);\n  padding: 20px;\n`\n\nexport const UserInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n`\n\nexport const Avatar = styled.img`\n  width: 39px;\n  height: 39px;\n  flex-shrink: 0;\n  border-radius: 50%;\n  background: var(--gray);\n  margin: 0 0 0 20px;\n`\nexport const Auth = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: flex-end  \n`\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useFetch } from 'src/hooks/useFetch'\n\nimport Authentication from '../Authentication'\nimport { Container, Avatar, UserInfo, Auth } from './styles'\n\ninterface User {\n    userId?: string;\n    user: UserApi;\n    score: number;\n}\n\ninterface UserApi {\n    userId: string;\n    firstName: string;\n    lastName: string;\n    imageUrl: string;\n}\n\ninterface Challenge {\n  name: string;\n  content: string;\n}\n\nconst Navbar: React.FC = () => {\n    const dispatch = useDispatch()\n    const data = useSelector((state: any) => state.data)\n    const dataAuth = useSelector((state: any) => state.data.auth)\n    const userId = useSelector((state: any) => state.data.auth.user.id)\n    const challengeName = useSelector((state: any) => state.data.selectedChallenge.name)\n\n    const { data: globalScore } = useFetch<User[]>('https://code-contest-backend.herokuapp.com/contests/global')\n    const { data: listOfUsers } = useFetch<UserApi[]>('https://code-contest-backend.herokuapp.com/contests/user')\n    const { data: challengeScore } = useFetch<User[]>(`https://code-contest-backend.herokuapp.com/contests/global/${challengeName}`)\n    const { data: userScore } = useFetch<User[]>(`https://code-contest-backend.herokuapp.com/contests/${userId}/${challengeName}`)\n    const { data: challengeIndex } = useFetch<Challenge>(`/contents/${challengeName?.split(' ').join('_')}/index.md`)\n    const { data: challengeList } = useFetch<Challenge>(`https://code-contest-backend.herokuapp.com/contests/list/${userId}`)\n    useEffect(() => {\n        const newData = { data: data }\n\n        newData.data.globalScore = globalScore || null\n        newData.data.listOfUsers = listOfUsers || null\n        newData.data.challengeScore = challengeScore || null\n        newData.data.userScore = userScore || null\n        newData.data.challengeIndex = challengeIndex || null\n        newData.data.challengeList = challengeList || null\n\n        dispatch({ type: 'CHALLENGE', data: newData })\n    }, [globalScore, listOfUsers, challengeScore, userScore, challengeIndex, challengeList, dispatch, data])\n\n    return (\n        <Container>\n            {dataAuth.authenticated ? (\n                <UserInfo>\n                    <span>Welcome, {dataAuth.user.name}!</span>\n                    <Avatar src={dataAuth.user.image} />\n                </UserInfo>\n            ) : (\n                <></>\n            )}\n            <Auth>\n                <Authentication />\n            </Auth>\n        </Container>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nimport { Grid } from './styles'\n\nimport Challenge from '../Challenge'\nimport UserList from '../UserList'\nimport ContestList from '../ContestList'\nimport Navbar from '../Navbar'\n\nconst Layout: React.FC = () => {\n    return (\n        <Grid>\n            <Navbar />\n            <ContestList />\n            <Challenge />\n            <UserList />\n        </Grid>\n    )\n}\n\nexport default Layout\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  html, body, #root {\n    height: 100%;\n  }\n  *, button, input {\n    border: 0;\n    outline: 0;\n    font-family: 'Roboto', sans-serif;\n  }\n  :root {\n    --primary: #36393f;\n    --secondary: #2f3136;\n    --tertiary: rgb(32,34,37);\n    --quaternary: #292b2f;\n    --quinary: #393d42;\n    --senary: #828386;\n    \n    --white: #fff;\n    --gray: #8a8c90;\n    --chat-input: rgb(64,68,75);\n    --symbol: #74777a;\n    --notification: #f84a4b;\n    --discord: #6e86d6;\n    --mention-detail: #f9a839;\n    --mention-message: #413f3f;\n    --link: #5d80d6;\n    --rocketseat: #6633cc;\n    --green: #149414;\n  }\n`\n","import React from 'react'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport Layout from './components/Layout'\nimport GlobalStyles from './styles/GlobalStyles'\n\nfunction App () {\n    return (\n        <Provider store={store}>\n            <Layout />\n\n            <GlobalStyles />\n        </Provider>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}